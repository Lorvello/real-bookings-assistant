import React, { useState, useMemo, useEffect } from 'react';
import { SearchableSelect } from './SearchableSelect';
import { Input } from '@/components/ui/input';
import { cn } from '@/lib/utils';

// Country data with calling codes
const COUNTRIES = [
  { code: 'NL', name: 'Netherlands', flag: 'ðŸ‡³ðŸ‡±', callingCode: '+31' },
  { code: 'US', name: 'United States', flag: 'ðŸ‡ºðŸ‡¸', callingCode: '+1' },
  { code: 'GB', name: 'United Kingdom', flag: 'ðŸ‡¬ðŸ‡§', callingCode: '+44' },
  { code: 'DE', name: 'Germany', flag: 'ðŸ‡©ðŸ‡ª', callingCode: '+49' },
  { code: 'FR', name: 'France', flag: 'ðŸ‡«ðŸ‡·', callingCode: '+33' },
  { code: 'ES', name: 'Spain', flag: 'ðŸ‡ªðŸ‡¸', callingCode: '+34' },
  { code: 'IT', name: 'Italy', flag: 'ðŸ‡®ðŸ‡¹', callingCode: '+39' },
  { code: 'PT', name: 'Portugal', flag: 'ðŸ‡µðŸ‡¹', callingCode: '+351' },
  { code: 'BE', name: 'Belgium', flag: 'ðŸ‡§ðŸ‡ª', callingCode: '+32' },
  { code: 'AT', name: 'Austria', flag: 'ðŸ‡¦ðŸ‡¹', callingCode: '+43' },
  { code: 'CH', name: 'Switzerland', flag: 'ðŸ‡¨ðŸ‡­', callingCode: '+41' },
  { code: 'SE', name: 'Sweden', flag: 'ðŸ‡¸ðŸ‡ª', callingCode: '+46' },
  { code: 'NO', name: 'Norway', flag: 'ðŸ‡³ðŸ‡´', callingCode: '+47' },
  { code: 'DK', name: 'Denmark', flag: 'ðŸ‡©ðŸ‡°', callingCode: '+45' },
  { code: 'FI', name: 'Finland', flag: 'ðŸ‡«ðŸ‡®', callingCode: '+358' },
  { code: 'PL', name: 'Poland', flag: 'ðŸ‡µðŸ‡±', callingCode: '+48' },
  { code: 'CZ', name: 'Czech Republic', flag: 'ðŸ‡¨ðŸ‡¿', callingCode: '+420' },
  { code: 'HU', name: 'Hungary', flag: 'ðŸ‡­ðŸ‡º', callingCode: '+36' },
  { code: 'RO', name: 'Romania', flag: 'ðŸ‡·ðŸ‡´', callingCode: '+40' },
  { code: 'BG', name: 'Bulgaria', flag: 'ðŸ‡§ðŸ‡¬', callingCode: '+359' },
  { code: 'HR', name: 'Croatia', flag: 'ðŸ‡­ðŸ‡·', callingCode: '+385' },
  { code: 'SI', name: 'Slovenia', flag: 'ðŸ‡¸ðŸ‡®', callingCode: '+386' },
  { code: 'SK', name: 'Slovakia', flag: 'ðŸ‡¸ðŸ‡°', callingCode: '+421' },
  { code: 'LT', name: 'Lithuania', flag: 'ðŸ‡±ðŸ‡¹', callingCode: '+370' },
  { code: 'LV', name: 'Latvia', flag: 'ðŸ‡±ðŸ‡»', callingCode: '+371' },
  { code: 'EE', name: 'Estonia', flag: 'ðŸ‡ªðŸ‡ª', callingCode: '+372' },
  { code: 'IE', name: 'Ireland', flag: 'ðŸ‡®ðŸ‡ª', callingCode: '+353' },
  { code: 'LU', name: 'Luxembourg', flag: 'ðŸ‡±ðŸ‡º', callingCode: '+352' },
  { code: 'MT', name: 'Malta', flag: 'ðŸ‡²ðŸ‡¹', callingCode: '+356' },
  { code: 'CY', name: 'Cyprus', flag: 'ðŸ‡¨ðŸ‡¾', callingCode: '+357' },
  { code: 'GR', name: 'Greece', flag: 'ðŸ‡¬ðŸ‡·', callingCode: '+30' },
  { code: 'CA', name: 'Canada', flag: 'ðŸ‡¨ðŸ‡¦', callingCode: '+1' },
  { code: 'AU', name: 'Australia', flag: 'ðŸ‡¦ðŸ‡º', callingCode: '+61' },
  { code: 'NZ', name: 'New Zealand', flag: 'ðŸ‡³ðŸ‡¿', callingCode: '+64' },
  { code: 'JP', name: 'Japan', flag: 'ðŸ‡¯ðŸ‡µ', callingCode: '+81' },
  { code: 'KR', name: 'South Korea', flag: 'ðŸ‡°ðŸ‡·', callingCode: '+82' },
  { code: 'CN', name: 'China', flag: 'ðŸ‡¨ðŸ‡³', callingCode: '+86' },
  { code: 'IN', name: 'India', flag: 'ðŸ‡®ðŸ‡³', callingCode: '+91' },
  { code: 'BR', name: 'Brazil', flag: 'ðŸ‡§ðŸ‡·', callingCode: '+55' },
  { code: 'MX', name: 'Mexico', flag: 'ðŸ‡²ðŸ‡½', callingCode: '+52' },
  { code: 'AR', name: 'Argentina', flag: 'ðŸ‡¦ðŸ‡·', callingCode: '+54' },
  { code: 'CL', name: 'Chile', flag: 'ðŸ‡¨ðŸ‡±', callingCode: '+56' },
  { code: 'CO', name: 'Colombia', flag: 'ðŸ‡¨ðŸ‡´', callingCode: '+57' },
  { code: 'PE', name: 'Peru', flag: 'ðŸ‡µðŸ‡ª', callingCode: '+51' },
  { code: 'VE', name: 'Venezuela', flag: 'ðŸ‡»ðŸ‡ª', callingCode: '+58' },
  { code: 'ZA', name: 'South Africa', flag: 'ðŸ‡¿ðŸ‡¦', callingCode: '+27' },
  { code: 'EG', name: 'Egypt', flag: 'ðŸ‡ªðŸ‡¬', callingCode: '+20' },
  { code: 'NG', name: 'Nigeria', flag: 'ðŸ‡³ðŸ‡¬', callingCode: '+234' },
  { code: 'KE', name: 'Kenya', flag: 'ðŸ‡°ðŸ‡ª', callingCode: '+254' },
  { code: 'MA', name: 'Morocco', flag: 'ðŸ‡²ðŸ‡¦', callingCode: '+212' },
  { code: 'TN', name: 'Tunisia', flag: 'ðŸ‡¹ðŸ‡³', callingCode: '+216' },
  { code: 'DZ', name: 'Algeria', flag: 'ðŸ‡©ðŸ‡¿', callingCode: '+213' },
  { code: 'RU', name: 'Russia', flag: 'ðŸ‡·ðŸ‡º', callingCode: '+7' },
  { code: 'UA', name: 'Ukraine', flag: 'ðŸ‡ºðŸ‡¦', callingCode: '+380' },
  { code: 'BY', name: 'Belarus', flag: 'ðŸ‡§ðŸ‡¾', callingCode: '+375' },
  { code: 'TR', name: 'Turkey', flag: 'ðŸ‡¹ðŸ‡·', callingCode: '+90' },
  { code: 'IL', name: 'Israel', flag: 'ðŸ‡®ðŸ‡±', callingCode: '+972' },
  { code: 'AE', name: 'United Arab Emirates', flag: 'ðŸ‡¦ðŸ‡ª', callingCode: '+971' },
  { code: 'SA', name: 'Saudi Arabia', flag: 'ðŸ‡¸ðŸ‡¦', callingCode: '+966' },
  { code: 'QA', name: 'Qatar', flag: 'ðŸ‡¶ðŸ‡¦', callingCode: '+974' },
  { code: 'KW', name: 'Kuwait', flag: 'ðŸ‡°ðŸ‡¼', callingCode: '+965' },
  { code: 'BH', name: 'Bahrain', flag: 'ðŸ‡§ðŸ‡­', callingCode: '+973' },
  { code: 'OM', name: 'Oman', flag: 'ðŸ‡´ðŸ‡²', callingCode: '+968' },
  { code: 'JO', name: 'Jordan', flag: 'ðŸ‡¯ðŸ‡´', callingCode: '+962' },
  { code: 'LB', name: 'Lebanon', flag: 'ðŸ‡±ðŸ‡§', callingCode: '+961' },
  { code: 'IQ', name: 'Iraq', flag: 'ðŸ‡®ðŸ‡¶', callingCode: '+964' },
  { code: 'IR', name: 'Iran', flag: 'ðŸ‡®ðŸ‡·', callingCode: '+98' },
  { code: 'AF', name: 'Afghanistan', flag: 'ðŸ‡¦ðŸ‡«', callingCode: '+93' },
  { code: 'PK', name: 'Pakistan', flag: 'ðŸ‡µðŸ‡°', callingCode: '+92' },
  { code: 'BD', name: 'Bangladesh', flag: 'ðŸ‡§ðŸ‡©', callingCode: '+880' },
  { code: 'LK', name: 'Sri Lanka', flag: 'ðŸ‡±ðŸ‡°', callingCode: '+94' },
  { code: 'MV', name: 'Maldives', flag: 'ðŸ‡²ðŸ‡»', callingCode: '+960' },
  { code: 'TH', name: 'Thailand', flag: 'ðŸ‡¹ðŸ‡­', callingCode: '+66' },
  { code: 'VN', name: 'Vietnam', flag: 'ðŸ‡»ðŸ‡³', callingCode: '+84' },
  { code: 'MY', name: 'Malaysia', flag: 'ðŸ‡²ðŸ‡¾', callingCode: '+60' },
  { code: 'SG', name: 'Singapore', flag: 'ðŸ‡¸ðŸ‡¬', callingCode: '+65' },
  { code: 'ID', name: 'Indonesia', flag: 'ðŸ‡®ðŸ‡©', callingCode: '+62' },
  { code: 'PH', name: 'Philippines', flag: 'ðŸ‡µðŸ‡­', callingCode: '+63' },
].sort((a, b) => a.name.localeCompare(b.name));

interface CountryPhoneInputProps {
  value?: string;
  onChange: (value: string) => void;
  className?: string;
  disabled?: boolean;
}

export function CountryPhoneInput({ value = '', onChange, className, disabled }: CountryPhoneInputProps) {
  // Local state for immediate UI updates
  const [localSelectedCountry, setLocalSelectedCountry] = useState<string>('NL');
  const [localNumber, setLocalNumber] = useState<string>('');

  // Initialize and sync with external value
  useEffect(() => {
    if (!value) {
      setLocalSelectedCountry('NL');
      setLocalNumber('');
      return;
    }
    
    // Find matching country by calling code
    const country = COUNTRIES.find(c => value.startsWith(c.callingCode));
    if (country) {
      setLocalSelectedCountry(country.code);
      setLocalNumber(value.substring(country.callingCode.length));
    } else {
      // Default to Netherlands if no match
      setLocalSelectedCountry('NL');
      setLocalNumber(value.startsWith('+') ? value.substring(3) : value);
    }
  }, [value]);

  const countryOptions = COUNTRIES.map(country => ({
    value: country.code,
    label: `${country.flag} ${country.name} ${country.callingCode}`,
    searchText: `${country.name} ${country.callingCode} ${country.code}`
  }));

  const handleCountryChange = (countryCode: string) => {
    const country = COUNTRIES.find(c => c.code === countryCode);
    if (country) {
      // Update local state immediately
      setLocalSelectedCountry(countryCode);
      const newValue = country.callingCode + localNumber;
      onChange(newValue);
    }
  };

  const handleNumberChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const newNumber = e.target.value.replace(/[^\d]/g, ''); // Only allow digits
    const country = COUNTRIES.find(c => c.code === localSelectedCountry);
    if (country) {
      // Update local state immediately for instant feedback
      setLocalNumber(newNumber);
      const newValue = country.callingCode + newNumber;
      onChange(newValue);
    }
  };

  const selectedCountryData = COUNTRIES.find(c => c.code === localSelectedCountry);

  return (
    <div className={cn("flex gap-2", className)}>
      <div className="w-48">
        <SearchableSelect
          value={localSelectedCountry}
          onValueChange={handleCountryChange}
          options={countryOptions}
          placeholder="Select country"
          searchPlaceholder="Search countries..."
          disabled={disabled}
        />
      </div>
      <div className="flex-1 relative">
        <div className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 text-sm pointer-events-none">
          {selectedCountryData?.callingCode}
        </div>
        <Input
          type="tel"
          value={localNumber}
          onChange={handleNumberChange}
          placeholder="123456789"
          className="pl-16 bg-gray-800 border-gray-700 text-white"
          disabled={disabled}
        />
      </div>
    </div>
  );
}